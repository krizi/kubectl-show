#!/usr/bin/env bash

VERSION='0.0.1'

SHELL_PATH=$0

CUSTOM_COLUMNS_PATH=$(dirname $(dirname $SHELL_PATH/custom-columns))

set -euo pipefail

function usage() {
  cat <<EOF
Usage:
# kubectl show pods --view overview,image
    combine the views you're investigating
# kubectl show version
    prints out the kubectl-show version ($VERSION)
# kubectl show help
    prints these usage instructions
# kubectl show views-available
    show_views
pretty prints resources
EOF
}

function show_views() {
  ls -R $CUSTOM_COLUMNS_PATH
}

# is aware of paths (multiple) to custom columns
# expecting single value kind!
# support lookup hierachy (e.g. name view available for everything)
# add support for own custom-columns paths and ENV variables instead files
function get_view() {
  custom_columns_path=$CUSTOM_COLUMNS_PATH
  lookup_paths=("$custom_columns_path/$1/$2" "$custom_columns_path/$2")

  #while [[ lookup_paths ]]; do

  for FILE in "${lookup_paths[@]}"; do
    if [[ -f "$FILE" ]]; then
      echo "$FILE"
      exit 0
    fi
  done
}

# TODO: map plurals and abbreviation to singular kind-name (po -> pod, pods -> pod, svc -> service)
function get_singular_kind_name() {
  echo $1
}

main() {
  command="kubectl get"



  CUSTOM_VIEW=("overview")

  kind=""
  while [[ $# -gt 0 ]]; do
    key="$1"

    if [ -z "$kind" ]; then
      kind=$(get_singular_kind_name $1)
    fi

    case $key in
    views-available)
      show_views
      exit 0
      ;;
    -vw | --view)
      IFS=','
      read -a CUSTOM_VIEW <<<"$2"
      shift # past argument
      shift # past value
      ;;
    -h | --help)
      usage
      exit 0
      ;;
    -version)
      version
      exit 0
      ;;
    *) # unknown option
      command+=" $1"
      shift # past argument
      ;;
    esac
  done

  if hash kubectl 2>/dev/null; then
    KUBECTL=kubectl
  elif hash kubectl.exe 2>/dev/null; then
    KUBECTL=kubectl.exe
  else
    echo >&2 "kubectl is not installed"
    exit 1
  fi

  #TODO: support jsonpath: not possible to combine views - maybe support for single line jsonpath parts

  for entry in "${CUSTOM_VIEW[@]}"; do
    path_view=$(get_view $kind $entry)

    columns+=$(head -n 1 $path_view)
    columns+=","
  done

  eval "$command -o custom-columns=${columns%?}"
}

main "$@"
